on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-x86:
    name: x86/${{ matrix.c_compiler }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install pcap on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev

    - name: Install Npcap on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri 'https://npcap.com/dist/npcap-sdk-1.15.zip' -OutFile 'npcap-sdk.zip'
        Expand-Archive -Path '.\npcap-sdk.zip' -DestinationPath 'C:\npcap-sdk'


    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/toolchain.cmake
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUNI_HAL_TARGET_MCU=PC
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  build-arm-gcc:
    name: arm/gcc (${{ matrix.mcu }}) on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mcu: [STM32H743, STM32L496]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Install GNU Arm Embedded Toolchain
      shell: bash
      run: |
        TOOLCHAIN_URL="https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi.tar.xz"
        TOOLCHAIN_TAR="arm-gnu-toolchain.tar.xz"
        TOOLCHAIN_DIR="${{ github.workspace }}/arm-gnu-toolchain"
        
        wget -O "${TOOLCHAIN_TAR}" "${TOOLCHAIN_URL}"
        mkdir -p "${TOOLCHAIN_DIR}"
        tar -xf "${TOOLCHAIN_TAR}" -C "${TOOLCHAIN_DIR}" --strip-components=1
        
        echo "${TOOLCHAIN_DIR}/bin" >> $GITHUB_PATH

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build-${{ matrix.mcu }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/toolchain.cmake
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUNI_HAL_TARGET_MCU=${{ matrix.mcu }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

  build-arm-clang:
    name: arm/clang (${{ matrix.mcu }}) on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mcu: [STM32H743, STM32L496]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Install LLVM Embedded Toolchain for Arm
      shell: bash
      run: |
        TOOLCHAIN_URL="https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm/releases/download/release-19.1.5/LLVM-ET-Arm-19.1.5-Linux-x86_64.tar.xz"
        TOOLCHAIN_TAR="llvm-toolchain.tar.xz"
        TOOLCHAIN_DIR="${{ github.workspace }}/llvm-toolchain"
        
        wget -O "${TOOLCHAIN_TAR}" "${TOOLCHAIN_URL}"
        mkdir -p "${TOOLCHAIN_DIR}"
        tar -xf "${TOOLCHAIN_TAR}" -C "${TOOLCHAIN_DIR}" --strip-components=1
        
        echo "${TOOLCHAIN_DIR}/bin" >> $GITHUB_PATH

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build-clang-${{ matrix.mcu }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/toolchain.cmake
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUNI_HAL_TARGET_MCU=${{ matrix.mcu }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
